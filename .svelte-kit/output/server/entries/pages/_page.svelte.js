import { c as create_ssr_component, b as each, e as escape, d as add_attribute, v as validate_component } from "../../chunks/ssr.js";
import "qrcode";
const css = {
  code: ".container.svelte-j7m9cv.svelte-j7m9cv{max-width:600px;margin:0 auto;padding:1em;text-align:center}.logo-container.svelte-j7m9cv.svelte-j7m9cv{margin-bottom:2em}.logo-container.svelte-j7m9cv img.svelte-j7m9cv{width:100%;max-width:350px;height:auto;margin:0 auto}.section.svelte-j7m9cv.svelte-j7m9cv{margin-bottom:3em}.category-section.svelte-j7m9cv.svelte-j7m9cv{margin-bottom:4em}.section.svelte-j7m9cv h2.svelte-j7m9cv{margin-bottom:1em}.categories-grid.svelte-j7m9cv.svelte-j7m9cv{display:grid;grid-template-columns:repeat(auto-fill, minmax(140px, 1fr));gap:1em;justify-content:center}.category-item.svelte-j7m9cv.svelte-j7m9cv{background-color:var(--input-background);color:var(--input-text-color);border:1px solid var(--border-color);border-radius:4px;padding:0.75em 1em;cursor:pointer;user-select:none;transition:background-color 0.3s, color 0.3s;font:inherit;outline:none;width:100%}.category-item.selected.svelte-j7m9cv.svelte-j7m9cv{background-color:var(--primary-color);color:#ffffff}.category-item.svelte-j7m9cv.svelte-j7m9cv:hover{background-color:var(--button-background);color:#ffffff}.player-list.svelte-j7m9cv.svelte-j7m9cv{list-style:none;padding:0}.player-input.svelte-j7m9cv.svelte-j7m9cv{display:flex;gap:0.5em;margin-bottom:0.5em}.remove-player-button.svelte-j7m9cv.svelte-j7m9cv{background-color:var(--border-color);color:var(--text-color);padding:0.5em;border-radius:50%;width:30px;height:30px;display:flex;align-items:center;justify-content:center;font-size:0.8em}.start-game-button.svelte-j7m9cv.svelte-j7m9cv{margin-top:1em;font-size:1.2em;padding:0.8em 1.5em}.modal-overlay.svelte-j7m9cv.svelte-j7m9cv{position:fixed;top:0;left:0;right:0;bottom:0;background-color:rgba(0, 0, 0, 0.5);display:flex;justify-content:center;align-items:center}.modal-content.svelte-j7m9cv.svelte-j7m9cv{background-color:var(--background-color);padding:2em;border-radius:8px;text-align:center}.post-game.svelte-j7m9cv.svelte-j7m9cv{display:flex;flex-direction:column;align-items:center}.qr-code-container.svelte-j7m9cv.svelte-j7m9cv{margin:1em 0}.qr-code-container.svelte-j7m9cv img.svelte-j7m9cv{max-width:100%;height:auto}.game-link.svelte-j7m9cv.svelte-j7m9cv{word-break:break-all}@media(max-width: 600px){.categories-grid.svelte-j7m9cv.svelte-j7m9cv{grid-template-columns:repeat(auto-fill, minmax(120px, 1fr))}}",
  map: `{"version":3,"file":"GameCreation.svelte","sources":["GameCreation.svelte"],"sourcesContent":["<script>\\n  import { onMount } from 'svelte';\\n  import { fly } from 'svelte/transition';\\n  import QRCode from 'qrcode';\\n  import { browser } from '$app/environment';\\n\\n  let players = [''];\\n  let qrCodeDataUrl = '';\\n  let gameStarted = false;\\n  let gameUrl = '';\\n  let showModal = false;\\n  let modalMessage = '';\\n\\n  let topics = []; // To store the topics fetched from 'topics.json'\\n\\n  onMount(async () => {\\n    if (browser) {\\n      try {\\n        const res = await fetch('/topics.json');\\n        if (!res.ok) {\\n          throw new Error(\`Failed to load topics: \${res.status} \${res.statusText}\`);\\n        }\\n        const data = await res.json();\\n\\n        // Initialize topics with 'selected' property\\n        topics = data.map((topic) => ({ ...topic, selected: true }));\\n      } catch (error) {\\n        console.error('Error loading topics:', error);\\n        alert('Failed to load topics. Please try again later.');\\n      }\\n    }\\n  });\\n\\n  function addPlayer() {\\n    players = [...players, ''];\\n  }\\n\\n  function removePlayer(index) {\\n    players = players.filter((_, i) => i !== index);\\n  }\\n\\n  function toggleCategory(index) {\\n    topics = topics.map((topic, i) => \\n      i === index ? { ...topic, selected: !topic.selected } : topic\\n    );\\n  }\\n\\n  function validateGameStart() {\\n    const validPlayers = players.filter(p => p.trim() !== '');\\n    const selectedCategories = topics.filter(t => t.selected);\\n\\n    if (validPlayers.length < 3) {\\n      showModal = true;\\n      modalMessage = 'You need at least 3 players to start the game.';\\n      return false;\\n    }\\n\\n    if (selectedCategories.length === 0) {\\n      showModal = true;\\n      modalMessage = 'You need to select at least one category to start the game.';\\n      return false;\\n    }\\n\\n    return true;\\n  }\\n\\n  async function startGame() {\\n    if (!validateGameStart()) return;\\n\\n    const timestamp = Date.now();\\n\\n    // Get indices of selected categories\\n    const selectedCategoryIndices = topics\\n      .map((topic, index) => (topic.selected ? index : null))\\n      .filter((index) => index !== null);\\n\\n    const gameConfiguration = {\\n      players: players.filter((p) => p.trim() !== ''),\\n      timestamp,\\n      selectedCategoryIndices,\\n    };\\n\\n    const queryParams = encodeURIComponent(JSON.stringify(gameConfiguration));\\n\\n    if (browser) {\\n      gameUrl = \`\${window.location.origin}\${window.location.pathname}?config=\${queryParams}\`;\\n    } else {\\n      gameUrl = \`/?config=\${queryParams}\`;\\n    }\\n\\n    qrCodeDataUrl = await QRCode.toDataURL(gameUrl);\\n    gameStarted = true;\\n  }\\n\\n  function closeModal() {\\n    showModal = false;\\n  }\\n\\n  function handleModalKeydown(event) {\\n    if (event.key === 'Escape') {\\n      closeModal();\\n    }\\n  }\\n<\/script>\\n\\n{#if !gameStarted}\\n  <div class=\\"container\\">\\n    <!-- Logo -->\\n    <div class=\\"logo-container\\">\\n      <img src=\\"/logo.jpg\\" alt=\\"Game Logo\\" />\\n    </div>\\n\\n    <!-- Category Selection Section -->\\n    <div class=\\"section category-section\\">\\n      <h2>Select Categories</h2>\\n      <div class=\\"categories-grid\\">\\n        {#each topics as topic, index (topic.topic)}\\n          <button\\n            type=\\"button\\"\\n            class=\\"category-item\\"\\n            class:selected={topic.selected}\\n            on:click={() => toggleCategory(index)}\\n          >\\n            {topic.topic}\\n          </button>\\n        {/each}\\n      </div>\\n    </div>\\n\\n    <!-- Player List Section -->\\n    <div class=\\"section player-section\\">\\n      <h2>Add Players</h2>\\n      <ul class=\\"player-list\\">\\n        {#each players as player, index (index)}\\n          <li transition:fly={{ y: 20, duration: 200 }}>\\n            <div class=\\"player-input\\">\\n              <input type=\\"text\\" bind:value={players[index]} placeholder=\\"Player Name\\" />\\n              {#if players.length > 1}\\n                <button on:click={() => removePlayer(index)} class=\\"remove-player-button\\">âœ•</button>\\n              {/if}\\n            </div>\\n          </li>\\n        {/each}\\n      </ul>\\n      <button on:click={addPlayer}>Add Player</button>\\n    </div>\\n\\n    <!-- Start Game Button -->\\n    <button on:click={startGame} class=\\"start-game-button\\">Start Game</button>\\n  </div>\\n{:else}\\n  <div class=\\"container post-game\\">\\n    <h2>Share the Game</h2>\\n    <div class=\\"qr-code-container\\">\\n      <img src={qrCodeDataUrl} alt=\\"Game QR Code\\" />\\n    </div>\\n    <p>Or share this link:</p>\\n    <p class=\\"game-link\\"><a href=\\"{gameUrl}\\">{gameUrl}</a></p>\\n  </div>\\n{/if}\\n\\n{#if showModal}\\n  <div \\n    class=\\"modal-overlay\\" \\n    on:click={closeModal}\\n    on:keydown={handleModalKeydown}\\n    tabindex=\\"0\\"\\n    role=\\"dialog\\"\\n    aria-labelledby=\\"modal-title\\"\\n  >\\n    <div class=\\"modal-content\\" on:click|stopPropagation>\\n      <h3 id=\\"modal-title\\">Attention</h3>\\n      <p>{modalMessage}</p>\\n      <button on:click={closeModal}>Close</button>\\n    </div>\\n  </div>\\n{/if}\\n\\n<style>\\n  .container {\\n    max-width: 600px;\\n    margin: 0 auto;\\n    padding: 1em;\\n    text-align: center;\\n  }\\n\\n  .logo-container {\\n    margin-bottom: 2em;\\n  }\\n\\n  .logo-container img {\\n    width: 100%;\\n    max-width: 350px;\\n    height: auto;\\n    margin: 0 auto;\\n  }\\n\\n  .section {\\n    margin-bottom: 3em;\\n  }\\n\\n  .category-section {\\n    margin-bottom: 4em;\\n  }\\n\\n  .section h2 {\\n    margin-bottom: 1em;\\n  }\\n\\n  .categories-grid {\\n    display: grid;\\n    grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));\\n    gap: 1em;\\n    justify-content: center;\\n  }\\n\\n  .category-item {\\n    background-color: var(--input-background);\\n    color: var(--input-text-color);\\n    border: 1px solid var(--border-color);\\n    border-radius: 4px;\\n    padding: 0.75em 1em;\\n    cursor: pointer;\\n    user-select: none;\\n    transition: background-color 0.3s, color 0.3s;\\n    font: inherit;\\n    outline: none;\\n    width: 100%;\\n  }\\n\\n  .category-item.selected {\\n    background-color: var(--primary-color);\\n    color: #ffffff;\\n  }\\n\\n  .category-item:hover {\\n    background-color: var(--button-background);\\n    color: #ffffff;\\n  }\\n\\n  .player-list {\\n    list-style: none;\\n    padding: 0;\\n  }\\n\\n  .player-input {\\n    display: flex;\\n    gap: 0.5em;\\n    margin-bottom: 0.5em;\\n  }\\n\\n  .remove-player-button {\\n    background-color: var(--border-color);\\n    color: var(--text-color);\\n    padding: 0.5em;\\n    border-radius: 50%;\\n    width: 30px;\\n    height: 30px;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    font-size: 0.8em;\\n  }\\n\\n  .start-game-button {\\n    margin-top: 1em;\\n    font-size: 1.2em;\\n    padding: 0.8em 1.5em;\\n  }\\n\\n  .modal-overlay {\\n    position: fixed;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    background-color: rgba(0, 0, 0, 0.5);\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n  }\\n\\n  .modal-content {\\n    background-color: var(--background-color);\\n    padding: 2em;\\n    border-radius: 8px;\\n    text-align: center;\\n  }\\n\\n  .post-game {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n  }\\n\\n  .qr-code-container {\\n    margin: 1em 0;\\n  }\\n\\n  .qr-code-container img {\\n    max-width: 100%;\\n    height: auto;\\n  }\\n\\n  .game-link {\\n    word-break: break-all;\\n  }\\n\\n  @media (max-width: 600px) {\\n    .categories-grid {\\n      grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\\n    }\\n  }\\n</style>"],"names":[],"mappings":"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"}`
};
const GameCreation = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let players = [""];
  let topics = [];
  $$result.css.add(css);
  return `${`<div class="container svelte-j7m9cv"> <div class="logo-container svelte-j7m9cv" data-svelte-h="svelte-1yibl89"><img src="/logo.jpg" alt="Game Logo" class="svelte-j7m9cv"></div>  <div class="section category-section svelte-j7m9cv"><h2 class="svelte-j7m9cv" data-svelte-h="svelte-12016nm">Select Categories</h2> <div class="categories-grid svelte-j7m9cv">${each(topics, (topic, index) => {
    return `<button type="button" class="${["category-item svelte-j7m9cv", topic.selected ? "selected" : ""].join(" ").trim()}">${escape(topic.topic)} </button>`;
  })}</div></div>  <div class="section player-section svelte-j7m9cv"><h2 class="svelte-j7m9cv" data-svelte-h="svelte-195q7o9">Add Players</h2> <ul class="player-list svelte-j7m9cv">${each(players, (player, index) => {
    return `<li><div class="player-input svelte-j7m9cv"><input type="text" placeholder="Player Name"${add_attribute("value", players[index], 0)}> ${players.length > 1 ? `<button class="remove-player-button svelte-j7m9cv" data-svelte-h="svelte-35a4sl">âœ•</button>` : ``}</div> </li>`;
  })}</ul> <button data-svelte-h="svelte-xkvb5c">Add Player</button></div>  <button class="start-game-button svelte-j7m9cv" data-svelte-h="svelte-d0h7ln">Start Game</button></div>`} ${``}`;
});
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${`${validate_component(GameCreation, "GameCreation").$$render($$result, {}, {}, {})}`}`;
});
export {
  Page as default
};
